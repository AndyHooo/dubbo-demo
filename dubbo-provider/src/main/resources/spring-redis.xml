<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-3.2.xsd">
    
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取； 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。 -->
		<property name="maxTotal" value="${redis.maxActive}" />
		<!-- 控制一个pool最多有多少个状态为idle(空闲的)的jedis实例。 -->
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!-- 表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException； -->
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<!-- 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的； -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
		<property name="testOnReturn" value="${redis.testOnReturn}" />
	</bean>
	
	<bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
		<property name="clusterNodes">
			<set>
				<ref bean="node0"/>
				<ref bean="node1"/>
				<ref bean="node2"/>
				<ref bean="node3"/>
				<ref bean="node4"/>
				<ref bean="node5"/>
			</set>
		</property>
	</bean>
	
	<bean id="node0" class="org.springframework.data.redis.connection.RedisNode">
        <constructor-arg name="host" value="${redis.host}" />
        <constructor-arg name="port" value="${redis.node0.port}" /> 
    </bean>

	<bean id="node1" class="org.springframework.data.redis.connection.RedisNode">
        <constructor-arg name="host" value="${redis.host}" />
        <constructor-arg name="port" value="${redis.node1.port}" /> 
    </bean>

    <bean id="node2" class="org.springframework.data.redis.connection.RedisNode">
        <constructor-arg name="host" value="${redis.host}" />
        <constructor-arg name="port" value="${redis.node2.port}" /> 
    </bean>
    
    <bean id="node3" class="org.springframework.data.redis.connection.RedisNode">
        <constructor-arg name="host" value="${redis.host}" />
        <constructor-arg name="port" value="${redis.node3.port}" /> 
    </bean>
    
    <bean id="node4" class="org.springframework.data.redis.connection.RedisNode">
        <constructor-arg name="host" value="${redis.host}" />
        <constructor-arg name="port" value="${redis.node4.port}" /> 
    </bean>
    
    <bean id="node5" class="org.springframework.data.redis.connection.RedisNode">
        <constructor-arg name="host" value="${redis.host}" />
        <constructor-arg name="port" value="${redis.node5.port}" /> 
    </bean>
	
	<!-- wind redis START. -->
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"></property>
		<property name="port" value="${redis.port}"></property>
		<property name="password" value="${redis.pass}"></property>
		<property name="poolConfig" ref="jedisPoolConfig"></property>
		<property name="database" value="${redis.database}"></property>
	</bean>

	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>
	<!-- wind redis end -->
	
	<!-- wind redis Cluster start -->
	<bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:use-pool="true">
		<constructor-arg name="clusterConfig" ref="redisClusterConfiguration"></constructor-arg>
		<constructor-arg name="poolConfig" ref="jedisPoolConfig"></constructor-arg>
	</bean>
  	
  	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="redisConnectionFactory">
  		<property name="keySerializer">  
        	<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
    	</property>  
    	<property name="valueSerializer">  
        	<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
    	</property>  
    	<property name="hashKeySerializer">  
        	<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
    	</property>  
    	<property name="hashValueSerializer">  
        	<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
    	</property> 
  	</bean>
	<!-- wind redis cluster end. -->
	
</beans>